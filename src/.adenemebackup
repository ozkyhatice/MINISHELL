
void	node_init(t_shell *shell, t_put_cmd *local)
{
	while (local->head && local->head->type != PIPE)
	{
		if (local->head->type == WORD)
			local->arg_len++;
		else if (local->head->type == INPUT || local->head->type == OUTPUT
			|| local->head->type == APPENDOUT || local->head->type == HD)
			add_redirection_node(shell, local->head->word, local->head->type);
		local->head = local->head->next;
	}
}

void	put_cmnds(t_shell *shell)
{
	t_put_cmd	local;

	define_rtype(shell->parse_head, shell->exec_head);
	local.head = shell->parse_head;
	local.cmnds = shell->exec_head;
	local.j = 0;
	while (local.head)
	{
		local.i = 0;
		local.arg_len = 0;
		node_init(shell, &local);
		if (local.head != NULL)
			local.head = local.head->next;
		local.tmp = get_parse_node(shell->parse_head, local.j);
		if (local.tmp != NULL && local.cmnds != NULL)
		{
			local.cmnds->cmd = malloc(sizeof(char *) * (local.arg_len + 1));
			if (!local.cmnds->cmd)
				return ;
			while (local.i < local.arg_len)
			{
				if (local.tmp->type == WORD)
					local.cmnds->cmd[local.i++] = ft_strdup(local.tmp->word);
				local.j++;
				local.tmp = local.tmp->next;
			}
			local.cmnds->cmd[local.i] = NULL;
			local.cmnds = local.cmnds->next;
		}
	}
}
